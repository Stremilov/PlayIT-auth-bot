import asyncio
import logging
import os
from datetime import datetime

import pandas as pd
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from aiogram.filters import Command
from aiogram import Bot, Dispatcher
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("TOKEN")
WEB_APP_URL = "https://it-otdel.space"

bot = Bot(token=TOKEN)
dp = Dispatcher()

CSV_FILE_PATH = "data.csv"


def check_user(message: Message):
    tg_username = message.from_user.username

    df = pd.read_csv(CSV_FILE_PATH)

    if tg_username in df['telegram_username'].values:
        return True

    return False


@dp.message(Command("start"))
async def start_cmd(message: Message):
    event_start_date = "11 –∞–ø—Ä–µ–ª—è"
    event_start_datetime = datetime.strptime("2025-04-11", "%Y-%m-%d")

    current_datetime = datetime.now()

    if current_datetime < event_start_datetime:
        await message.answer(
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, —Å—Ç—Ä–∞–Ω–Ω–∏–∫!\n"
            "–≠—Ç–æ –±–æ—Ç –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ PlayIT üßå\n"
            "–ü–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–º–µ–Ω–Ω–æ –∑–¥–µ—Å—å —Ç—ã –Ω–∞—á–Ω—ë—à—å —Å–≤–æ—ë —Å–∫–∞–∑–æ—á–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ!\n\n"
            f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞—á–Ω—ë—Ç—Å—è {event_start_date}.\n\n"
            "–ë–æ—Ç –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –¥–µ–Ω—å –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."
        )
    else:
        if check_user(message):
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=WEB_APP_URL))]
            ],
                resize_keyboard=True
            )
            await message.answer(text="–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", reply_markup=keyboard)
        else:
            await message.answer(text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.")


async def send_daily_message():
    try:
        df = pd.read_csv(CSV_FILE_PATH)
        for username in df['telegram_username']:
            try:
                user = await bot.get_chat(f"{username}")
                await bot.send_message(
                    chat_id=user.id,
                    text="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –¥–æ–±—Ä—ã–π –º–æ–ª–æ–¥–µ—Ü –∏–ª–∏ –¥–µ–≤–∏—Ü–∞ –∫—Ä–∞—Å–Ω–∞—è! "
                         "–î–æ–∑–≤–æ–ª—å —É–≤–µ–¥–æ–º–∏—Ç—å –æ –ø—Ä–∏–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π –º—É–¥—Ä—ë–Ω—ã—Ö."
                )
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ @{username}: {e}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")


async def main():
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    scheduler.add_job(
        send_daily_message,
        CronTrigger(hour=12, minute=0),
    )
    scheduler.start()
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
